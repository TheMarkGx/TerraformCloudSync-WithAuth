# Unity Cloud Save â€“ Client Integration Guide (Phase 1)

This guide explains how to integrate the Phase 1 cloud save API from Unity or any HTTP client. The backend is deployed using Terraform to AWS (S3, Lambda, API Gateway).

Authentication is mocked in this phase. Real OAuth integration is planned for Phase 2.

---

## Authentication

All requests must include:

```
Authorization: Bearer dev-test-token
```

This static token is used to bypass real JWT validation in Lambda. Any request with this exact token is accepted.

---

## API Endpoints

**Base URL format:**
```
https://<api_id>.execute-api.<region>.amazonaws.com/
```

---

### `POST /upload`

**Purpose:** Upload a save file to S3  
**Method:** POST  
**Headers:**
- Authorization: Bearer dev-test-token
- Content-Type: application/octet-stream  
**Body:** Raw binary contents of the save file  
**Response:** `{ "message": "Upload successful", "versionId": "<optional>" }`

**Unity C# Example:**
```csharp
UnityWebRequest req = UnityWebRequest.Put(uploadUrl, saveBytes);
req.SetRequestHeader("Authorization", "Bearer dev-test-token");
req.SetRequestHeader("Content-Type", "application/octet-stream");
yield return req.SendWebRequest();
```

---

### `GET /download`

**Purpose:** Download the latest save file  
**Method:** GET  
**Headers:**
- Authorization: Bearer dev-test-token  
**Response:** Raw binary contents of the save file

**Unity C# Example:**
```csharp
UnityWebRequest req = UnityWebRequest.Get(downloadUrl);
req.SetRequestHeader("Authorization", "Bearer dev-test-token");
yield return req.SendWebRequest();
byte[] saveBytes = req.downloadHandler.data;
```

---

### `DELETE /delete`

**Purpose:** Delete the current save file  
**Method:** DELETE  
**Headers:**
- Authorization: Bearer dev-test-token  
**Response:** `{ "message": "File deleted" }`

---

## S3 Object Management

- All save files are stored in S3 under a hardcoded path: `dev_user/master-save.dat`
- S3 versioning is already enabled in anticipation of future features like checkpoints and restore

---

## Local Testing (cURL Examples)

```bash
curl -X POST "$UPLOAD_URL" \
  -H "Authorization: Bearer dev-test-token" \
  --data-binary "@SaveFile.dat"

curl -X GET "$DOWNLOAD_URL" \
  -H "Authorization: Bearer dev-test-token" \
  -o "DownloadedSave.dat"

curl -X DELETE "$DELETE_URL" \
  -H "Authorization: Bearer dev-test-token"
```

---

## Coming in Phase 2

- OAuth token authentication using Google Sign-In
- Server-side validation of JWTs (audience, expiration, signature)
- Per-user save isolation in S3
- Real user folder prefixes (e.g. `users/<user_hash>/master-save.dat`)
